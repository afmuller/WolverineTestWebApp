// <auto-generated/>
#pragma warning disable
using Microsoft.EntityFrameworkCore;
using Wolverine.FluentValidation;

namespace Internal.Generated.WolverineHandlers
{
    // START: UpsertCompanyCommandHandler1330902003
    public class UpsertCompanyCommandHandler1330902003 : Wolverine.Runtime.Handlers.MessageHandler
    {
        private readonly Microsoft.EntityFrameworkCore.DbContextOptions<WebApplication1.ApplicationDbContext> _dbContextOptions;
        private readonly Wolverine.FluentValidation.IFailureAction<WebApplication1.Companies.UpsertCompanyCommand> _failureAction;

        public UpsertCompanyCommandHandler1330902003(Microsoft.EntityFrameworkCore.DbContextOptions<WebApplication1.ApplicationDbContext> dbContextOptions, Wolverine.FluentValidation.IFailureAction<WebApplication1.Companies.UpsertCompanyCommand> failureAction)
        {
            _dbContextOptions = dbContextOptions;
            _failureAction = failureAction;
        }



        public override async System.Threading.Tasks.Task HandleAsync(Wolverine.Runtime.MessageContext context, System.Threading.CancellationToken cancellation)
        {
            await using var applicationDbContext = new WebApplication1.ApplicationDbContext(_dbContextOptions);
            var upsertCompanyCommandValidator = new WebApplication1.Companies.UpsertCompanyCommandValidator(applicationDbContext);
            // The actual message body
            var upsertCompanyCommand = (WebApplication1.Companies.UpsertCompanyCommand)context.Envelope.Message;

            
            // Enroll the DbContext & IMessagingContext in the outgoing Wolverine outbox transaction
            var envelopeTransaction = Wolverine.EntityFrameworkCore.WolverineEntityCoreExtensions.BuildTransaction(applicationDbContext, context);
            await context.EnlistInOutboxAsync(envelopeTransaction);
            await Wolverine.FluentValidation.Internals.FluentValidationExecutor.ExecuteOne<WebApplication1.Companies.UpsertCompanyCommand>(upsertCompanyCommandValidator, _failureAction, upsertCompanyCommand).ConfigureAwait(false);
            
            // The actual message execution
            var outgoing1 = await WebApplication1.Companies.UpsertCompanyCommandHandler.Handle(upsertCompanyCommand, applicationDbContext).ConfigureAwait(false);

            
            // Outgoing, cascaded message
            await context.EnqueueCascadingAsync(outgoing1).ConfigureAwait(false);

            
            // Added by EF Core Transaction Middleware
            var result_of_SaveChangesAsync = await applicationDbContext.SaveChangesAsync(cancellation).ConfigureAwait(false);

            // If we have separate context for outbox and application, then we need to manually commit the transaction
            if (envelopeTransaction is Wolverine.EntityFrameworkCore.Internals.RawDatabaseEnvelopeTransaction rawTx) { await rawTx.CommitAsync(); }
        }

    }

    // END: UpsertCompanyCommandHandler1330902003
    
    
}

